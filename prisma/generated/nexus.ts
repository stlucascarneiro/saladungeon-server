/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  CountFavorite: { // root type
    Favorite?: number | null; // Int
  }
  Favorite: { // root type
    createdAt?: string | null; // String
    id?: number | null; // Int
    message?: string | null; // String
    post?: string | null; // String
    statusCode?: number | null; // Int
    user?: string | null; // String
  }
  Mutation: {};
  Post: { // root type
    Favorite?: string | null; // String
    Report?: string | null; // String
    category?: string | null; // String
    content?: string | null; // String
    createdAt?: string | null; // String
    genre?: string | null; // String
    id?: number | null; // Int
    message?: string | null; // String
    statusCode?: number | null; // Int
    tags?: string | null; // String
    user?: string | null; // String
  }
  Query: {};
  Report: { // root type
    createdAt?: string | null; // String
    id?: number | null; // Int
    message?: string | null; // String
    post?: string | null; // String
    statusCode?: number | null; // Int
    type?: string | null; // String
    user?: string | null; // String
  }
  Token: { // root type
    accessToken?: string | null; // String
    message?: string | null; // String
    refreshToken?: string | null; // String
    statusCode?: string | null; // String
  }
  User: { // root type
    about?: string | null; // String
    contact?: string | null; // String
    createdAt?: string | null; // String
    email?: string | null; // String
    id?: number | null; // Int
    message?: string | null; // String
    password?: string | null; // String
    statusCode?: number | null; // Int
    updatedAt?: string | null; // String
    username?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  CountFavorite: { // field return type
    Favorite: number | null; // Int
  }
  Favorite: { // field return type
    createdAt: string | null; // String
    id: number | null; // Int
    message: string | null; // String
    post: string | null; // String
    statusCode: number | null; // Int
    user: string | null; // String
  }
  Mutation: { // field return type
    authenticateUser: Array<NexusGenRootTypes['Token'] | null> | null; // [Token]
    createUser: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    logoutUser: Array<NexusGenRootTypes['Token'] | null> | null; // [Token]
    refreshUser: Array<NexusGenRootTypes['Token'] | null> | null; // [Token]
  }
  Post: { // field return type
    Favorite: string | null; // String
    Report: string | null; // String
    _count: NexusGenRootTypes['CountFavorite'] | null; // CountFavorite
    category: string | null; // String
    content: string | null; // String
    createdAt: string | null; // String
    genre: string | null; // String
    id: number | null; // Int
    message: string | null; // String
    statusCode: number | null; // Int
    tags: string | null; // String
    user: string | null; // String
  }
  Query: { // field return type
    findUsers: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Report: { // field return type
    createdAt: string | null; // String
    id: number | null; // Int
    message: string | null; // String
    post: string | null; // String
    statusCode: number | null; // Int
    type: string | null; // String
    user: string | null; // String
  }
  Token: { // field return type
    accessToken: string | null; // String
    message: string | null; // String
    refreshToken: string | null; // String
    statusCode: string | null; // String
  }
  User: { // field return type
    about: string | null; // String
    contact: string | null; // String
    createdAt: string | null; // String
    email: string | null; // String
    id: number | null; // Int
    message: string | null; // String
    password: string | null; // String
    statusCode: number | null; // Int
    updatedAt: string | null; // String
    username: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  CountFavorite: { // field return type name
    Favorite: 'Int'
  }
  Favorite: { // field return type name
    createdAt: 'String'
    id: 'Int'
    message: 'String'
    post: 'String'
    statusCode: 'Int'
    user: 'String'
  }
  Mutation: { // field return type name
    authenticateUser: 'Token'
    createUser: 'User'
    logoutUser: 'Token'
    refreshUser: 'Token'
  }
  Post: { // field return type name
    Favorite: 'String'
    Report: 'String'
    _count: 'CountFavorite'
    category: 'String'
    content: 'String'
    createdAt: 'String'
    genre: 'String'
    id: 'Int'
    message: 'String'
    statusCode: 'Int'
    tags: 'String'
    user: 'String'
  }
  Query: { // field return type name
    findUsers: 'User'
  }
  Report: { // field return type name
    createdAt: 'String'
    id: 'Int'
    message: 'String'
    post: 'String'
    statusCode: 'Int'
    type: 'String'
    user: 'String'
  }
  Token: { // field return type name
    accessToken: 'String'
    message: 'String'
    refreshToken: 'String'
    statusCode: 'String'
  }
  User: { // field return type name
    about: 'String'
    contact: 'String'
    createdAt: 'String'
    email: 'String'
    id: 'Int'
    message: 'String'
    password: 'String'
    statusCode: 'Int'
    updatedAt: 'String'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    authenticateUser: { // args
      email?: string | null; // String
      password: string; // String!
      username?: string | null; // String
    }
    createUser: { // args
      email: string; // String!
      password: string; // String!
      username: string; // String!
    }
    logoutUser: { // args
      accessToken: string; // String!
      refreshToken: string; // String!
    }
    refreshUser: { // args
      refreshToken: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}